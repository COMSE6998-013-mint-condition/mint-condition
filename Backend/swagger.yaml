swagger: '2.0'
info:
  title: Mint Condition
  description: 'Backend API for Mint Condition: classifying trading cards'
  version: 1.0.0
schemes:
  - https
basePath: /v1
produces:
  - application/json
paths:
  /upload:
    put:
      summary: trading card upload
      description: This API takes in the multi-part body/binary sent to it (ex. a trading card) and uploads it to an S3 bucket.
      operationId: uploadPhoto
      consumes:
        - image/png
        - image/jpg
        - image/jpeg
        - image/bmp
        - image/gif
      produces:
        - application/json
      parameters:
        - name: X-Key
          in: header
          type: string
          required: true
        - name: x-amz-meta-customLabels
          in: header
          type: string
          required: true
        - name: x-amz-meta-user
          in: header
          type: string
          required: true
      responses:
        '200':
          description: S3 PUT operation response
          schema:
            type: object
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '405':
          description: Method Not Defined
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  /card/{id}:
    get:
      summary: get card information
      description: get information regarding the specified card
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the card to get
      produces:
        - application/json
      responses:
        '200':
          description: Card metadata
          schema:
            $ref: '#/definitions/Card'
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '405':
          description: Method Not Defined
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: delete card 
      description: delete specified card
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the card to delete
      produces:
        - application/json
      responses:
        '200':
          description: Deleted card
          schema:
            $ref: '#/definitions/Card'
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '405':
          description: Method Not Defined
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /card:
    post:
      summary: update card information
      description: update information regarding the specified card
      parameters:
        - in: body
          name: body
          required: true
          description: updated card metadata
          schema:
            $ref: '#/definitions/CardUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Updated card
          schema:
            $ref: '#/definitions/Card'
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '405':
          description: Method Not Defined
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
  /cards:
    get:
      summary: get all cards for user
      description: get all the user's cards
      produces:
        - application/json
      responses:
        '200':
          description: All card metadata
          schema:
            $ref: '#/definitions/Cards'
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '405':
          description: Method Not Defined
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
  /user/:
    get:
      summary: get user information
      description: get information regarding the user
      produces:
        - application/json
      responses:
        '200':
          description: User metadata
          schema:
            $ref: '#/definitions/User'
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '405':
          description: Method Not Defined
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  /search:
    get:
      summary: photo search method
      description: This API takes in a search query as a query parameter and returns zero or more cards that match the search query (label or condition).
      operationId: searchCards
      parameters:
        - in: query
          name: label
          type: string
          description: the label string to be searched
        - in: query
          name: condition
          type: string
          description: the condition string to be searched
      produces:
        - application/json
      responses:
        '200':
          description: search results
          schema:
            $ref: '#/definitions/Cards'
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '405':
          description: Method Not Defined
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


definitions:
  LoginResponse:
    type: string

  Card:
    type: object
    properties:
      card_id:
        type: integer
        format: int32
      path:
        type: string
      label: 
        type: string
      condition_label:
        type: string
      condition_desc:
        type: string
      owner_name:
        type: string
      price_object:
        type: object
        properties:
          $ref: "#/definitions/PriceObject"

  Cards:
    type: object
    properties:
      cards:
        type: array
        items:
          $ref: "#/definitions/Card"
          
  CardUpdate:
    type: object
    properties:
      label:        
        type: string
      id:
        type: integer

  PriceObject:
    type: object
    properties:
      max_value:
        type: float
      min_value:
        type: flaot
      count:
        type: integer
        format: int32
      mean_value: 
        type: float

  PriceObject:
    type: object
    properties:
      cards:
        type: array
        items:
          $ref: "#/definitions/PriceObject"
        
  Cards:
    type: object
    properties:
      cards:
        type: array
        items:
          $ref: "#/definitions/Card"
          
  User:
    type: object
    properties:
      user_id:
        type: string
      email:
        type: string
  
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string